<?php


declare(strict_types=1);

namespace skyblock\entity\boss;

use pocketmine\block\VanillaBlocks;
use pocketmine\entity\Attribute;
use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\AddActorPacket;
use pocketmine\network\mcpe\protocol\types\entity\Attribute as NetworkAttribute;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\PropertySyncData;
use pocketmine\player\Player;
use pocketmine\world\particle\BlockBreakParticle;
use skyblock\caches\combat\CombatCache;
use skyblock\entity\EntityData;
use skyblock\entity\ai\MovingEntity;
use skyblock\items\special\types\SpawnerItem;
use skyblock\Main;
use skyblock\misc\arena\ArenaManager;
use skyblock\player\AetherPlayer;
use skyblock\sessions\Session;
use skyblock\utils\EntityUtils;
use SOFe\AwaitGenerator\Await;

class IslandBossEntity extends MovingEntity implements EntityData{

	public function __construct(private string $networkID, Location $location, ?CompoundTag $nbt = null){
		parent::__construct($location, $nbt);
	}

	protected function initEntity(CompoundTag $nbt) : void{
        if (!$nbt->getTag("networkID38") === null) {
            $this->close();
            return;
        }

		$this->networkID = $nbt->getString("networkID38");

		if(($tag = $nbt->getInt("hardness"))){
			$this->speed = 0.50 + ($tag * 0.13);
			$this->damage = 5 + ($tag * 1.1);
			$max = 200 + ($tag * 450);

			$this->setMaxHealth($max);

			if($nbt->getByte("spawnedBefore", 1) === 1){
				$this->setHealth($max);
				$nbt->setByte("spawnedBefore", 5);
			}
		}

		parent::initEntity($nbt);
	}

	public function attack(EntityDamageEvent $source): void
	{
		parent::attack($source);

		if(!$source->isCancelled()){
			$this->location->world->addParticle($this->location, new BlockBreakParticle(VanillaBlocks::REDSTONE()), $this->getViewers());
		}
	}

	public function saveNBT() : CompoundTag{
		$nbt = parent::saveNBT();
		$nbt->setString("networkID38", $this->networkID);

		return $nbt;
	}

	protected function getInitialSizeInfo() : EntitySizeInfo{
		return new EntitySizeInfo(self::HEIGHTS[self::NETWORK_IDS[self::LEGACY_ID_MAP_BC[$this->networkID]]], self::WIDTHS[self::NETWORK_IDS[self::LEGACY_ID_MAP_BC[$this->networkID]]]);
	}

	public static function getNetworkTypeId() : string{
		return EntityIds::ZOMBIE;
	}

	protected function sendSpawnPacket(Player $player) : void{
		$player->getNetworkSession()->sendDataPacket(AddActorPacket::create(
			$this->getId(),
			$this->getId(),
			$this->networkID,
			$this->location->asVector3(),
			$this->getMotion(),
			$this->location->pitch,
			$this->location->yaw,
			$this->location->yaw,
			$this->location->yaw,
			array_map(function(Attribute $attr) : NetworkAttribute{
				return new NetworkAttribute($attr->getId(), $attr->getMinValue(), $attr->getMaxValue(), $attr->getValue(), $attr->getDefaultValue(), []);
			}, $this->attributeMap->getAll()),
			$this->getAllNetworkData(),
			new PropertySyncData([], []),
			[],
		));

		$player->getNetworkSession()->onMobArmorChange($this);
	}

	public function flagForDespawn() : void{
		parent::flagForDespawn(); // TODO: Change the autogenerated stub
	}

	public function kill() : void{

		parent::kill();

		$last = $this->getLastDamageCause();
		if($last instanceof EntityDamageByEntityEvent){
			$dmg = $last->getDamager();

			$notGive = [EntityIds::RAVAGER, EntityIds::ZOGLIN, SpawnerItem::WARDEN, SpawnerItem::PIGLIN_BRUTE];
			if($dmg instanceof Player && !in_array($this->networkID, $notGive)){
				(new Session($dmg))->addCollectItem(SpawnerItem::getItem($this->networkID));
				$dmg->sendMessage(Main::PREFIX . "You have received a §c" . EntityUtils::getEntityNameFromID($this->networkID) . "§7 spawner in your collect. (/collect)");
			}
		}

		if(($arena = ArenaManager::getInstance()->getArenaByWorld($this->location->getWorld()))){
			$finish = $arena->onFinish;

			$finish($this, $arena);
			Await::f2c(function() use($arena) {
				yield Main::getInstance()->getStd()->sleep(10);
				yield ArenaManager::getInstance()->closeArena($arena);
			});
		}
	}

	public function getName() : string{
		return EntityUtils::getEntityNameFromID($this->networkID);
	}

	public function updateNametag(): void {
		$name = EntityUtils::getEntityNameFromID($this->networkID);
		$this->setNameTag("§l§b$name Boss\n§l§cHP: " . number_format($this->getHealth()));
	}

	public function setHealth(float $amount): void
	{
		parent::setHealth($amount);
		$this->updateNametag();
	}
}